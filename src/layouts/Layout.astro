---
import { pwaInfo } from "virtual:pwa-info";
import "../styles/main.scss";
import Header from "../components/Header.astro";
import Footer from "../components/Footer.astro";

export interface Props {
	title: string;
}

const { title } = Astro.props;
---

<!DOCTYPE html>
<html lang='en'>
	<head>
		<meta charset='UTF-8' />
		<meta name='viewport' content='width=device-width' />
		<link rel='apple-touch-icon' sizes='180x180' href='/apple-touch-icon.png' />
		<link rel='icon' type='image/png' sizes='32x32' href='/favicon-32x32.png' />
		<link rel='icon' type='image/png' sizes='16x16' href='/favicon-16x16.png' />
		<link rel='mask-icon' href='/safari-pinned-tab.svg' color='#292524' />
		<meta name='msapplication-TileColor' content='#da532c' />
		<meta name='theme-color' content='#fff7ed' />

		<!-- Facebook Meta Tags -->
		<meta property='og:url' content='https://astro-bible.netlify.app' />
		<meta property='og:type' content='website' />
		<meta property='og:title' content='The Bible' />
		<meta
			property='og:description'
			content='An intentionally simple Bible PWA with offline support and light/dark modes.'
		/>
		<meta property='og:image' content='https://astro-bible.netlify.app/opengraph.png' />
		<meta property='og:image:width' content='1200' />
		<meta property='og:image:height' content='630' />

		<!-- Twitter Meta Tags -->
		<meta name='twitter:card' content='summary_large_image' />
		<meta property='twitter:domain' content='astro-bible.netlify.app' />
		<meta property='twitter:url' content='https://astro-bible.netlify.app' />
		<meta name='twitter:title' content='The Bible' />
		<meta
			name='twitter:description'
			content='An intentionally simple Bible PWA with offline support and light/dark modes.'
		/>
		<meta name='twitter:image' content='https://astro-bible.netlify.app/opengraph.png' />

		{pwaInfo && <Fragment set:html={pwaInfo.webManifest.linkTag} />}
		<title>{title}</title>
		<meta
			name='description'
			content='An intentionally simple Bible PWA with offline support and light/dark modes.'
		/>
		<meta name='author' content='Stefen Phelps' />
		<script is:inline>
			// purposefully make render blocking to prevent flash of wrong theme
			const setColorScheme = (value) => {
				document.documentElement.dataset.colorScheme = value;
				localStorage.setItem("color-scheme", value);
			};

			if (localStorage.getItem("color-scheme")) {
				setColorScheme(localStorage.getItem("color-scheme"));
			}
		</script>
	</head>
	<body>
		<Header />
		<slot />
		<Footer />
		<script>
			import { registerSW } from "virtual:pwa-register";
			import Snackbar from "node-snackbar";

			// pwa stuff
			if ("serviceWorker" in navigator) {
				const updateSW = registerSW({
					onNeedRefresh() {
						Snackbar.show({
							text: "Update available.",
							actionText: "Update",
							actionTextColor: "var(--accent)",
							onActionClick: updateSW(true)
						});
					},
					onOfflineReady() {
						Snackbar.show({
							text: "Offline ready.",
							actionTextColor: "var(--accent)"
						});
					}
				});
			}
		</script>
	</body>
</html>
